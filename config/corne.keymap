#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        ad_fslh: adaptive_fslash {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_FSLASH";
            #binding-cells = <0>;
            defaults = <&ht_at_excl 0 SLASH>;
            bindings = <&kp U>, <&kp A>;

            antecedents = <A U>;
            max-delay-ms = <1000>;
        };

        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41 0 12 24>;
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 11 23 35>;
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
        };

        lhm_s: lhm_s {
            compatible = "zmk,behavior-hold-tap";
            label = "LHM_S";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41 0 12 24>;
            hold-trigger-on-release;
        };

        rhm_s: rhm_s {
            compatible = "zmk,behavior-hold-tap";
            label = "RHM_S";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 11 23 35>;
            hold-trigger-on-release;
        };

        callum_mod: callum_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "CALLUM_MOD";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <20000>;
            quick-release;
            ignore-modifiers;
        };

        td_layers_1: td_layers_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYERS_1";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&mo 4>, <&mo 6>;

            tapping-term-ms = <300>;
        };

        td_layers_2: td_layers_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYERS_2";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&mo 5>, <&mo 6>;

            tapping-term-ms = <300>;
        };

        linger: linger {
            compatible = "zmk,behavior-hold-tap";
            label = "LINGER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_at_excl: ht_at_excl {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_AT_EXCL";
            bindings = <&mm_at_excl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        mm_at_excl: mm_at_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_AT_EXCL";
            bindings = <&kp AT>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RALT)>;
        };

        mm_comma_semi: mm_comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_period_colon: mm_period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_q_l {
            bindings = <&kp Q>;
            key-positions = <2 3>;
            layers = <0>;
            timeout-ms = <100>;
        };

        combo_q_r {
            bindings = <&kp Q>;
            key-positions = <9 8>;
            timeout-ms = <100>;
            layers = <0>;
        };

        combo_z_l {
            bindings = <&kp Z>;
            key-positions = <13 2>;
            layers = <0>;
            timeout-ms = <100>;
        };

        combo_z_r {
            bindings = <&kp Z>;
            key-positions = <22 9>;
            timeout-ms = <100>;
            layers = <0>;
        };

        combo_esc_l {
            bindings = <&kp ESC>;
            key-positions = <4 16>;
            timeout-ms = <100>;
            layers = <0>;
        };

        combo_esc_r {
            bindings = <&kp ESC>;
            key-positions = <19 7>;
            timeout-ms = <100>;
            layers = <0>;
        };

        combo_return_l {
            bindings = <&kp RETURN>;
            key-positions = <15 14 16>;
            timeout-ms = <150>;
        };

        combo_return_r {
            bindings = <&kp RETURN>;
            key-positions = <20 19 21>;
            timeout-ms = <150>;
        };

        combo_delete_l {
            bindings = <&kp DELETE>;
            key-positions = <17 4>;
            timeout-ms = <150>;
        };

        combo_delete_r {
            bindings = <&kp DELETE>;
            key-positions = <18 7>;
            timeout-ms = <150>;
        };

        combo_backspace_l {
            bindings = <&kp BACKSPACE>;
            key-positions = <4 5>;
            timeout-ms = <150>;
        };

        combo_backspace_r {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
            timeout-ms = <150>;
        };

        combo_excl_l {
            bindings = <&kp EXCL>;
            key-positions = <4 15>;
            layers = <0 2>;
        };

        combo_excl_r {
            bindings = <&kp EXCL>;
            key-positions = <20 7>;
            layers = <0 2>;
        };

        combo_percent_l {
            bindings = <&kp PERCENT>;
            key-positions = <14 3>;
            layers = <2>;
        };

        combo_hash_l {
            bindings = <&kp HASH>;
            key-positions = <1 4>;
            layers = <2>;
        };

        combo_dollar_l {
            bindings = <&kp DOLLAR>;
            key-positions = <1 16>;
            layers = <2>;
        };

        combo_amp_l {
            bindings = <&kp AMPERSAND>;
            key-positions = <4 13>;
            layers = <2>;
        };

        combo_lbrace_l {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 3>;
            layers = <2>;
        };

        combo_rbrace_l {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <3 4>;
            layers = <2>;
        };

        combo_lt_l {
            bindings = <&kp LESS_THAN>;
            key-positions = <14 15>;
            layers = <2>;
        };

        combo_gt_l {
            bindings = <&kp GREATER_THAN>;
            key-positions = <15 16>;
            layers = <2>;
        };

        combo_tilde_l {
            bindings = <&kp TILDE>;
            key-positions = <3 16>;
            layers = <2>;
        };

        combo_asterisk_l {
            bindings = <&kp ASTERISK>;
            key-positions = <2 16>;
            layers = <2>;
        };
    };

    macros {
        com: com {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp M>;
            label = "COM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        hd {
            bindings = <
&kp LC(UP)      &kp X            &kp W            &kp G                &kp M                &kp J           &com            &mm_period_colon      &ad_fslh              &kp BACKSLASH     &linger GRAVE SQT  &kp RC(UP)
&kp LGUI        &kp S            &kp N            &kp T                &kp H                &kp K           &mm_comma_semi  &kp A                 &kp E                 &kp I             &kp C              &kp RGUI
&kp LEFT_SHIFT  &lhm LEFT_GUI B  &lhm LEFT_ALT P  &lhm LEFT_CONTROL D  &lhm_s LEFT_SHIFT L  &kp V           &kp MINUS       &rhm_s RIGHT_SHIFT U  &rhm RIGHT_CONTROL O  &rhm RIGHT_ALT Y  &rhm RIGHT_GUI F   &kp RIGHT_SHIFT
                                                  &lt 1 TAB            &lt 2 SPACE          &td_layers_2    &td_layers_1    &lt 2 R               &kp BACKSPACE
            >;
        };

        button {
            bindings = <
&none  &none                 &none                 &none                     &none                   &none        &none      &none                    &none                      &none                  &none                  &none
&none  &kp LG(Z)             &kp LG(X)             &kp LG(C)                 &kp LG(V)               &kp LG(A)    &kp RG(A)  &kp RG(V)                &kp RG(C)                  &kp RG(X)              &kp RG(Z)              &none
&none  &callum_mod LEFT_GUI  &callum_mod LEFT_ALT  &callum_mod LEFT_CONTROL  &callum_mod LEFT_SHIFT  &none        &none      &callum_mod RIGHT_SHIFT  &callum_mod RIGHT_CONTROL  &callum_mod RIGHT_ALT  &callum_mod RIGHT_GUI  &none
                                                   &trans                    &trans                  &trans       &trans     &trans                   &trans
            >;
        };

        num_sym {
            bindings = <
&none  &kp CARET     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS        &none     &kp N6          &kp N7               &kp N8                 &kp N9             &kp N0             &none
&none  &kp GRAVE     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL       &none     &mm_comma_semi  &kp N4               &kp N5                 &kp N6             &kp PERIOD         &none
&none  &kp LEFT_GUI  &kp LEFT_ALT          &kp LEFT_CONTROL       &kp LEFT_SHIFT  &none     &kp SLASH       &rhm RIGHT_SHIFT N1  &rhm RIGHT_CONTROL N2  &rhm RIGHT_ALT N3  &rhm RIGHT_GUI N0  &none
                                           &trans                 &trans          &trans    &trans          &trans               &trans
            >;
        };

        nav {
            bindings = <
&none  &none         &kp HOME      &kp UP            &kp END         &kp PG_UP    &none   &kp HOME         &kp PG_DN          &kp PG_UP      &kp END        &none
&none  &none         &kp LEFT      &kp DOWN          &kp RIGHT       &kp PG_DN    &none   &kp LEFT         &kp DOWN           &kp UP         &kp RIGHT      &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none        &none   &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI  &none
                                   &trans            &trans          &trans       &trans  &trans           &trans
            >;
        };

        media {
            bindings = <
&none  &none  &none       &kp C_VOLUME_UP    &none             &none     &none   &none             &kp C_BRI_DN       &kp C_BRI_UP     &none       &none
&none  &none  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_NEXT        &none     &none   &kp C_PREVIOUS    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &none
&none  &none  &none       &none              &kp C_PLAY_PAUSE  &none     &none   &kp C_PLAY_PAUSE  &none              &none            &none       &none
                          &trans             &trans            &trans    &trans  &trans            &trans
            >;
        };

        function {
            bindings = <
&none  &none         &none         &none             &none           &none     &none            &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &none         &none         &none             &none           &none     &caps_word       &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none     &kp PRINTSCREEN  &kp F1  &kp F2  &kp F3  &kp F12  &none
                                   &trans            &trans          &trans    &trans           &trans  &trans
            >;
        };

        settings {
            bindings = <
&none  &bt BT_CLR    &none         &none         &out OUT_TOG  &bootloader     &bootloader  &none   &none   &none  &none  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none        &none   &none   &none  &none  &none
&none  &kp A         &kp W         &kp M         &kp I         &kp X           &none        &none   &none   &none  &none  &none
                                   &trans        &trans        &trans          &trans       &trans  &trans
            >;
        };

        num {
            bindings = <
&kp N0  &kp N1  &kp N2  &kp N3   &kp N4     &kp N5    &kp N6     &kp N7  &kp N8  &kp N9  &kp N0   &trans
&kp N4  &kp N5  &kp N6  &kp N7   &kp N8     &kp N9    &kp COMMA  &kp N4  &kp N5  &kp N6  &kp DOT  &trans
&trans  &kp N9  &kp N0  &kp DOT  &kp COMMA  &trans    &kp N0     &kp N1  &kp N2  &kp N3  &kp N0   &trans
                        &trans   &trans     &trans    &trans     &trans  &trans
            >;
        };
    };
};

